# =============================================================================
# CO-INTELLIGENCE GENAI UNIVERSE - ENVIRONMENT CONFIGURATION
# =============================================================================

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================
# Change PUBLIC_IP to switch between local and cloud deployment
# For Local Development: PUBLIC_IP=localhost
# For Cloud/EC2 Deployment: PUBLIC_IP=your_ec2_public_ip
PUBLIC_IP=localhost

# Auto-detect deployment environment based on PUBLIC_IP
DEPLOYMENT_ENV=local
HOST_IP=localhost
ENVIRONMENT=development
DEBUG=true

# =============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# =============================================================================
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=cointelligence_db
POSTGRES_USER=cointelligence_user
POSTGRES_PASSWORD=secure_cointelligence_password_2025

# Database URL for application
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# For local development (when connecting outside Docker)
DATABASE_URL_LOCAL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:${POSTGRES_PORT}/${POSTGRES_DB}

# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================
# JWT Configuration - CHANGE THESE IN PRODUCTION!
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production-cointelligence-2025
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
# Add your AWS credentials here
AWS_DEFAULT_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_aws_access_key_here
AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here

# Bedrock Models - Using Claude 3 Haiku for fast responses
BEDROCK_PRIMARY_MODEL=anthropic.claude-3-haiku-20240307-v1:0
BEDROCK_FALLBACK_MODEL=anthropic.claude-3-haiku-20240307-v1:0

# =============================================================================
# BACKEND CONFIGURATION
# =============================================================================
API_V1_STR=/api/v1
PROJECT_NAME="Co-Intelligence GenAI Universe"
VERSION=2.0.0

# =============================================================================
# DYNAMIC URLS (Uses PUBLIC_IP variable)
# =============================================================================
# Backend URLs
BACKEND_URL=http://${PUBLIC_IP}:8000
FRONTEND_URL=http://${PUBLIC_IP}:3000

# React Frontend Configuration (Uses PUBLIC_IP variable)
REACT_APP_API_URL=http://${PUBLIC_IP}:8000/api/v1
REACT_APP_BACKEND_URL=http://${PUBLIC_IP}:8000
REACT_APP_AI_CHAT_URL=http://${PUBLIC_IP}:8501
REACT_APP_DOCUMENT_ANALYSIS_URL=http://${PUBLIC_IP}:8502
REACT_APP_WEB_SEARCH_URL=http://${PUBLIC_IP}:8503

# =============================================================================
# HTMX APPS CONFIGURATION
# =============================================================================
API_BASE_URL=http://backend:8000

# =============================================================================
# DEPLOYMENT INSTRUCTIONS
# =============================================================================
#
# FOR LOCAL DEVELOPMENT:
# 1. Set: PUBLIC_IP=localhost
# 2. Add your AWS credentials above
# 3. Update JWT_SECRET_KEY for security
# 4. Run: docker-compose up -d --build
# 5. Database will be automatically created and migrated
#
# FOR CLOUD DEPLOYMENT (EC2):
# 1. Set: PUBLIC_IP=your_ec2_public_ip
# 2. Add your AWS credentials above
# 3. Update JWT_SECRET_KEY for security
# 4. Update POSTGRES_PASSWORD for security
# 5. Run: docker-compose -f docker-compose.prod.yml up -d --build
#
# AUTHENTICATION FEATURES:
# - User registration: POST /api/v1/auth/register
# - User login: POST /api/v1/auth/login
# - Get user info: GET /api/v1/auth/me
# - All AI endpoints now require authentication
#
# MANAGEMENT COMMANDS:
# - Stop: docker-compose down
# - Logs: docker-compose logs -f
# - Restart: docker-compose restart
# - Database logs: docker-compose logs postgres
#
# =============================================================================
